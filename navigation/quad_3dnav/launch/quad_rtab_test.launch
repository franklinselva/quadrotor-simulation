<?xml version="1.0"?>

<launch>

  <!-- <env name="ROSCONSOLE_CONFIG_FILE" value="$(find quad_control)/custom_rosconsole.conf"/> -->

  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="quad"/>
  <arg name="headless" default="true"/>
  <arg name="gui" default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find quad_gazebo)/worlds/willowgarage.world"/> 
<!--    <arg name="world_name" value="$(find quad_gazebo)/worlds/kitchen.world"/>  -->
    <!-- more default parameters can be changed here -->
    <arg name="debug" value="false" /> 
    <arg name="paused" value="true"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn 3DR Model -->                  
    <include file="$(find quad_gazebo)/launch/spawn_quad_kinect.launch"> 
<!--    <include file="$(find quad_gazebo)/launch/spawn_quad_kinect_kitchen.launch">  -->  
    <arg name="model" value="$(find quad_description)/urdf/kit_c_base.xacro" />  
    <arg name="enable_logging" value="$(arg enable_logging)" />
    <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
    <arg name="log_file" value="$(arg log_file)"/>
  </include>

  <group ns="quad">
    <node name="joy_node" pkg="joy" type="joy_node" />
    <node name="quad_joystick_interface" pkg="quad_joystick_interface" type="quad_joystick_interface" output="screen"/> 
    <node name="waypoint_node" pkg="quad_control" type="waypoint_publisher_node" output="screen"/> 
  </group>
  <group ns="quad">
    <node name="position_controller_node" pkg="quad_control" type="position_controller_node" output="screen"> 
      <rosparam command="load" file="$(find quad_gazebo)/resource/kit_c.yaml" /> 
      <rosparam command="load" file="$(find quad_control)/resource/position_controller.yaml" /> 
    </node> 
    <node name="attitude_controller_node" pkg="quad_control" type="attitude_controller_node" output="screen"> 
      <rosparam command="load" file="$(find quad_gazebo)/resource/kit_c.yaml" /> 
      <rosparam command="load" file="$(find quad_control)/resource/attitude_controller.yaml" />  
    </node> 
  </group>


  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node pkg="tf" type="static_transform_publisher" name="world_to_map" 
    args="0.0 0.0 0.0 0.0 0.0 0.0 world /map 100" />

  <!-- RTAB Map -->
  <!-- WARNING : Database is automatically deleted on each startup -->
  <!--           See "delete_db_on_start" option below... -->

  <!-- Choose visualization -->
  <arg name="rviz" default="true" />
  <arg name="rtabmapviz" default="false" /> 

  <param name="use_sim_time" type="bool" value="True"/>  

  <group ns="rtabmap">
    <!-- SLAM (robot side) -->
    <!-- args: "delete_db_on_start" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
	  <param name="frame_id" type="string" value="base_link"/>
	  <param name="wait_for_transform" type="bool" value="true"/>	
	  <param name="subscribe_depth" type="bool" value="true"/>
	  <param name="subscribe_laserScan" type="bool" value="false"/>
	
   	  <!-- Inputs -->
	  <remap from="odom" to="/quad/ground_truth/odometry"/>
	  <remap from="rgb/image" to="/quad/camera_/camera/image_raw"/>
  	  <remap from="depth/image" to="/quad/camera_/depth/disparity"/>
  	  <remap from="rgb/camera_info" to="/quad/camera_/camera/camera_info"/>
	
	  <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
	  <param name="RGBD/PoseScanMatching" type="string" value="false"/>  <!-- Do odometry correction with consecutive laser scans -->
	  <param name="RGBD/LocalLoopDetectionSpace" type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
	  <param name="RGBD/LocalLoopDetectionTime" type="string" value="false"/>   <!-- Local loop closure detection with locations in STM -->
	  <param name="RGBD/OptimizeFromGraphEnd" type="string" value="true"/> 
	  <param name="LccIcp/Type" type="string" value="2"/>                      <!-- 0=No ICP, 1=ICP 3D, 2=ICP 2D -->
	  <param name="LccBow/InlierDistance" type="string" value="0.1"/>          <!-- 3D visual words correspondence distance -->
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>    <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
    </node>

    <node pkg="rtabmap_ros" type="map_assembler" name="map_assembler"></node>

    <!-- Visualisation RTAB-Map -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_depth" type="bool" value="true"/>
      <param name="subscribe_laserScan" type="bool" value="false"/>
      <param name="frame_id" type="string" value="base_link"/>
      <param name="wait_for_transform" type="bool" value="true"/>
    
      <remap from="rgb/image" to="/quad/camera_/camera/image_raw"/>
      <remap from="depth/image" to="/quad/camera_/depth/disparity"/>
      <remap from="rgb/camera_info" to="/quad/camera_/camera/camera_info"/>    
      <remap from="odom" to="/quad/ground_truth/odometry"/>

    </node>

  <!-- Visualisation RVIZ -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find quad_description)/resource/quad_kinect.rviz" output="screen"/>
  <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen"/>
  <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
    <remap from="rgb/image_in"        to="/quad/camera_/camera/image_raw"/>
    <remap from="depth/image_in"      to="/quad/camera_/depth/disparity"/>
    <remap from="rgb/camera_info_in"  to="/quad/camera_/camera/camera_info"/>

  </node>
  <node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load rtabmap_ros/point_cloud_xyzrgb standalone_nodelet">
      <remap from="rgb/image" to="/quad/camera_/camera/image_raw"/>
      <remap from="depth/image" to="/quad/camera_/depth/disparity"/>
      <remap from="rgb/camera_info" to="/quad/camera_/camera/camera_info"/> 
      <remap from="cloud"           to="/voxel_cloud" />
        
      <param name="queue_size" type="int" value="10"/>
      <param name="voxel_size" type="double" value="0.01"/>
  </node>

  </group>

 <!-- Octomap Server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
	<param name="resolution" value="0.0250" />		
	<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
	<param name="frame_id" type="string" value="map" />		
	<!-- maximum range to integrate (speedup, accuracy) -->
	<param name="max_sensor_range" value="7.0" />
     	<param name="filter_ground" value="false" /><!-- who knows where the floor is? -->
    	<param name="base_frame_id" value="base_link" /> <!--needs to be set, even if not used-->		
	<!-- data source to integrate (PointCloud2) -->
        <remap from="cloud_in" to="/rtabmap/assembled_clouds" />
  </node>

</launch>

























